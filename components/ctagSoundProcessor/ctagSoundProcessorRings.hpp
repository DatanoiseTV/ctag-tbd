#include <atomic>
#include "ctagSoundProcessor.hpp"
#include "rings/dsp/part.h"
#include "rings/dsp/strummer.h"
#include "rings/dsp/string_synth_part.h"
#include <cstdint>

namespace CTAG {
    namespace SP {
        class ctagSoundProcessorRings : public ctagSoundProcessor {
        public:
            virtual void Process(const ProcessData &);

            virtual ~ctagSoundProcessorRings();

            ctagSoundProcessorRings();

            virtual const char *GetCStrID() const;

        private:
            void setParamValueInternal(const string &id, const string &key, const int val) override;
            void loadPresetInternal() override;
            void updateParams(const ProcessData &);

// autogenerated code here
// sectionHpp
const string id = "Rings";
void setIsStereo(){isStereo = true;}
atomic<int32_t> reson_model, cv_reson_model;
atomic<int32_t> frequency, cv_frequency;
atomic<int32_t> polyphony, cv_polyphony;
atomic<int32_t> structure, cv_structure;
atomic<int32_t> brightness, cv_brightness;
atomic<int32_t> damping, cv_damping;
atomic<int32_t> position, cv_position;
atomic<int32_t> easter, trig_easter;
atomic<int32_t> ex_int, trig_ex_int;
atomic<int32_t> strum_int, trig_strum_int;
atomic<int32_t> note_int, trig_note_int;
atomic<int32_t> chords, cv_chords;
atomic<int32_t> mod_brightness, cv_mod_brightness;
atomic<int32_t> mod_frequency, cv_mod_frequency;
atomic<int32_t> mod_damping, cv_mod_damping;
atomic<int32_t> mod_structure, cv_mod_structure;
atomic<int32_t> mod_position, cv_mod_position;
// sectionHpp


            // private attributes could go here
            uint16_t *reverb_buffer;
            rings::Part part;
            rings::StringSynthPart string_synth;
            rings::Strummer strummer;
            rings::ResonatorModel resonatorModel = rings::RESONATOR_MODEL_MODAL;
            bool strum = false;
            bool lastStrum = false;

            rings::Patch patch;
            rings::PerformanceState performance_state;

        };
    }
}