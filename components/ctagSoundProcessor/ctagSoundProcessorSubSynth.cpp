/***************
CTAG TBD >>to be determined<< is an open source eurorack synthesizer module.

A project conceived within the Creative Technologies Arbeitsgruppe of
Kiel University of Applied Sciences: https://www.creative-technologies.de

(c) 2020 by Robert Manzke. All rights reserved.

The CTAG TBD software is licensed under the GNU General Public License
(GPL 3.0), available here: https://www.gnu.org/licenses/gpl-3.0.txt

The CTAG TBD hardware design is released under the Creative Commons
Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0).
Details here: https://creativecommons.org/licenses/by-nc-sa/4.0/

CTAG TBD is provided "as is" without any express or implied warranties.

License and copyright details for specific submodules are included in their
respective component folders / files if different from this license.
***************/


#include "ctagSoundProcessorSubSynth.hpp"
#include "esp_heap_caps.h"
#include <iostream>
#include <cmath>
#include "helpers/ctagFastMath.hpp"
#include "freeverb/denormals.hh"

using namespace CTAG::SP;

ctagSoundProcessorSubSynth::ctagSoundProcessorSubSynth() {
    isStereo = false;
    // acquire model from spiffs json, model auto loads last active preset
    model = std::make_unique<ctagSPDataModel>(id, isStereo);
    // take preset values from model
    loadPresetInternal();
    // inits
}

void ctagSoundProcessorSubSynth::Process(const ProcessData &data) {
}

ctagSoundProcessorSubSynth::~ctagSoundProcessorSubSynth() {
}

const char *ctagSoundProcessorSubSynth::GetCStrID() const {
    return id.c_str();
}

void ctagSoundProcessorSubSynth::setParamValueInternal(const string& id, const string& key, const int val) {
// autogenerated code here
// sectionCpp0
if(id.compare("ntype") == 0){
	if(key.compare("current") == 0){
		ntype = val;
		return;
	}
	if(key.compare("trig") == 0){
		if(val >= -1 && val <= 1)
			trig_ntype = val;
		return;
	}
}
if(id.compare("bwidth") == 0){
	if(key.compare("current") == 0){
		bwidth = val;
		return;
	}
	if(key.compare("cv") == 0){
		if(val >= -1 && val <= 3)
			cv_bwidth = val;
		return;
	}
}
if(id.compare("nharms") == 0){
	if(key.compare("current") == 0){
		nharms = val;
		return;
	}
	if(key.compare("cv") == 0){
		if(val >= -1 && val <= 3)
			cv_nharms = val;
		return;
	}
}
if(id.compare("gain") == 0){
	if(key.compare("current") == 0){
		gain = val;
		return;
	}
	if(key.compare("cv") == 0){
		if(val >= -1 && val <= 3)
			cv_gain = val;
		return;
	}
}
// sectionCpp0





}

void ctagSoundProcessorSubSynth::loadPresetInternal() {
// autogenerated code here
// sectionCpp1
ntype = model->GetParamValue("ntype", "current");
trig_ntype = model->GetParamValue("ntype", "trig");
bwidth = model->GetParamValue("bwidth", "current");
cv_bwidth = model->GetParamValue("bwidth", "cv");
nharms = model->GetParamValue("nharms", "current");
cv_nharms = model->GetParamValue("nharms", "cv");
gain = model->GetParamValue("gain", "current");
cv_gain = model->GetParamValue("gain", "cv");
// sectionCpp1

}
