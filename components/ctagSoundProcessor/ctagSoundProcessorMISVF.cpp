#include "ctagSoundProcessorMISVF.hpp"
#include <iostream>
#include <cmath>

using namespace CTAG::SP;

ctagSoundProcessorMISVF::ctagSoundProcessorMISVF() {
    setIsStereo();
    model = std::make_unique<ctagSPDataModel>(id, isStereo);
    model->LoadPreset(0);

    adEnv.SetSampleRate(44100.f / bufSz);
    adEnv.SetModeExp();
    svf.Init();
}

void ctagSoundProcessorMISVF::Process(const ProcessData &data) {
    int mode = flt_mode;
    if(cv_flt_mode != -1){
        mode = fabsf(data.cv[cv_flt_mode]) * 3;
    }
    if(mode > 2) mode = 2;
    if(mode < 0) mode = 0;

    // eg fm
    float fAttack, fDecay;
    float fAD = 0.f;
    if(enableEG == 1 && trig_enableEG != -1){
        if(data.trig[trig_enableEG] != prevTrigState){
            prevTrigState = data.trig[trig_enableEG];
            if(prevTrigState == 0) adEnv.Trigger();
        }
        adEnv.SetLoop(loopEG);
        fAttack = static_cast<float>(attack) / 4095.f;
        if(cv_attack != -1){
            fAttack = fabsf(data.cv[cv_attack]);
        }
        fDecay = static_cast<float>(decay) / 4095.f;
        if(cv_decay != -1){
            fDecay = fabsf(data.cv[cv_decay]);
        }
        adEnv.SetAttack(fAttack);
        adEnv.SetDecay(fDecay);
        fAD = adEnv.Process();
    }

    // modulation
    // gain is punch
    float fGain = static_cast<float>(gain) / 4095.f;
    float fCutoff = static_cast<float>(cutoff) / 4095.f;
    float fResonance = static_cast<float>(resonance) / 4095.f;
    float fFM = static_cast<float>(fm_amt) / 4095.f;
    if(cv_cutoff != -1){
        fCutoff = data.cv[cv_cutoff] * data.cv[cv_cutoff];
    }
    if(cv_resonance != -1){
        fResonance = fabsf(data.cv[cv_resonance]);
    }
    if(cv_gain != -1){
        fGain = fabsf(data.cv[cv_gain]);
    }
    if(cv_fm_amt != -1){
        // external CV
        fCutoff += fFM * data.cv[cv_fm_amt];
    }else if(enableEG == 1){
        // internal AD env
        fCutoff += fFM * fAD;
    }

    int16_t f = static_cast<int16_t>(fCutoff * 16384.f);
    int16_t r = static_cast<int16_t>(fResonance * 32767.f);
    uint16_t p = static_cast<uint16_t>(fGain * 65535.f);
    if(r<80) r = 80;
    if(f<0) f = 0;
    svf.set_frequency(f);
    svf.set_resonance(r);
    svf.set_punch(p);
    svf.set_mode(static_cast<braids::SvfMode>(mode));

    for(int i=0;i<bufSz;i++){
        int32_t v = static_cast<int32_t>(data.buf[i*2 + processCh] * 32767.f);
        data.buf[i*2 + processCh] = static_cast<float>(svf.Process(v)) / 32767.f;
    }
}

ctagSoundProcessorMISVF::~ctagSoundProcessorMISVF() {
}

const char *ctagSoundProcessorMISVF::GetCStrID() const {
    return id.c_str();
}


void ctagSoundProcessorMISVF::setParamValueInternal(const string& id, const string& key, const int val) {
// autogenerated code here
// sectionCpp0
if(id.compare("flt_mode") == 0){
	if(key.compare("current") == 0){
		flt_mode = val;
		return;
	}else if(key.compare("cv") == 0){
		if(val >= -1 && val <= 3)
			cv_flt_mode = val;
	}
	return;
}
if(id.compare("gain") == 0){
	if(key.compare("current") == 0){
		gain = val;
		return;
	}else if(key.compare("cv") == 0){
		if(val >= -1 && val <= 3)
			cv_gain = val;
	}
	return;
}
if(id.compare("cutoff") == 0){
	if(key.compare("current") == 0){
		cutoff = val;
		return;
	}else if(key.compare("cv") == 0){
		if(val >= -1 && val <= 3)
			cv_cutoff = val;
	}
	return;
}
if(id.compare("resonance") == 0){
	if(key.compare("current") == 0){
		resonance = val;
		return;
	}else if(key.compare("cv") == 0){
		if(val >= -1 && val <= 3)
			cv_resonance = val;
	}
	return;
}
if(id.compare("fm_amt") == 0){
	if(key.compare("current") == 0){
		fm_amt = val;
		return;
	}else if(key.compare("cv") == 0){
		if(val >= -1 && val <= 3)
			cv_fm_amt = val;
	}
	return;
}
if(id.compare("enableEG") == 0){
	if(key.compare("current") == 0){
		enableEG = val;
		return;
	}else if(key.compare("trig") == 0){
		if(val >= -1 && val <= 1)
			trig_enableEG = val;
	}
	return;
}
if(id.compare("loopEG") == 0){
	if(key.compare("current") == 0){
		loopEG = val;
		return;
	}else if(key.compare("trig") == 0){
		if(val >= -1 && val <= 1)
			trig_loopEG = val;
	}
	return;
}
if(id.compare("attack") == 0){
	if(key.compare("current") == 0){
		attack = val;
		return;
	}else if(key.compare("cv") == 0){
		if(val >= -1 && val <= 3)
			cv_attack = val;
	}
	return;
}
if(id.compare("decay") == 0){
	if(key.compare("current") == 0){
		decay = val;
		return;
	}else if(key.compare("cv") == 0){
		if(val >= -1 && val <= 3)
			cv_decay = val;
	}
	return;
}
// sectionCpp0




}

void ctagSoundProcessorMISVF::loadPresetInternal() {
// autogenerated code here
// sectionCpp1
flt_mode = model->GetParamValue("flt_mode", "current");
cv_flt_mode = model->GetParamValue("flt_mode", "cv");
gain = model->GetParamValue("gain", "current");
cv_gain = model->GetParamValue("gain", "cv");
cutoff = model->GetParamValue("cutoff", "current");
cv_cutoff = model->GetParamValue("cutoff", "cv");
resonance = model->GetParamValue("resonance", "current");
cv_resonance = model->GetParamValue("resonance", "cv");
fm_amt = model->GetParamValue("fm_amt", "current");
cv_fm_amt = model->GetParamValue("fm_amt", "cv");
enableEG = model->GetParamValue("enableEG", "current");
trig_enableEG = model->GetParamValue("enableEG", "trig");
loopEG = model->GetParamValue("loopEG", "current");
trig_loopEG = model->GetParamValue("loopEG", "trig");
attack = model->GetParamValue("attack", "current");
cv_attack = model->GetParamValue("attack", "cv");
decay = model->GetParamValue("decay", "current");
cv_decay = model->GetParamValue("decay", "cv");
// sectionCpp1




}
