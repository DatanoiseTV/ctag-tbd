#include <atomic>
#include "ctagSoundProcessor.hpp"
#include "helpers/ctagADEnv.hpp"

namespace CTAG {
    namespace SP {
        class ctagSoundProcessorBCSR : public ctagSoundProcessor {
        public:
            virtual void Process(const ProcessData &);

            virtual ~ctagSoundProcessorBCSR();

            ctagSoundProcessorBCSR();

            virtual const char *GetCStrID() const;

        private:
            void setParamValueInternal(const string &id, const string &key, const int val) override;
            void loadPresetInternal() override;
            void updateParams(const ProcessData &data);


// autogenerated code here
// sectionHpp
const string id = "BCSR";
void setIsStereo(){isStereo = false;}
atomic<int32_t> level, cv_level;
atomic<int32_t> invert, trig_invert;
atomic<int32_t> dry, cv_dry;
atomic<int32_t> bc_ena, trig_bc_ena;
atomic<int32_t> bc_amount, cv_bc_amount;
atomic<int32_t> eg_bc_ena, trig_eg_bc_ena;
atomic<int32_t> eg_bc_loop, trig_eg_bc_loop;
atomic<int32_t> eg_bc_le, trig_eg_bc_le;
atomic<int32_t> eg_bc_amount, cv_eg_bc_amount;
atomic<int32_t> eg_bc_att, cv_eg_bc_att;
atomic<int32_t> eg_bc_dec, cv_eg_bc_dec;
atomic<int32_t> sr_ena, trig_sr_ena;
atomic<int32_t> sr_amount, cv_sr_amount;
atomic<int32_t> eg_sr_ena, trig_eg_sr_ena;
atomic<int32_t> eg_sr_loop, trig_eg_sr_loop;
atomic<int32_t> eg_sr_le, trig_eg_sr_le;
atomic<int32_t> eg_sr_amount, cv_eg_sr_amount;
atomic<int32_t> eg_sr_att, cv_eg_sr_att;
atomic<int32_t> eg_sr_dec, cv_eg_sr_dec;
// sectionHpp










            // private attributes could go here
            float phase;
            float prevSample;
            bool bcEGTrig, srEGTrig;
            HELPERS::ctagADEnv egSR, egBC;
            float fNormFreq, isSRReduce, fScale, fGain, fDry, fEGBCAmount, fEGSRAmount;
            bool isBitCrush, isInvertWet;
        };
    }
}