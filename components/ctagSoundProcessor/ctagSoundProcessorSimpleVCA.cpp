/***************
CTAG TBD >>to be determined<< is an open source eurorack synthesizer module.

A project conceived within the Creative Technologies Arbeitsgruppe of
Kiel University of Applied Sciences: https://www.creative-technologies.de

(c) 2020 by Robert Manzke. All rights reserved.

The CTAG TBD software is licensed under the GNU General Public License
(GPL 3.0), available here: https://www.gnu.org/licenses/gpl-3.0.txt

The CTAG TBD hardware design is released under the Creative Commons
Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0).
Details here: https://creativecommons.org/licenses/by-nc-sa/4.0/

CTAG TBD is provided "as is" without any express or implied warranties.

License and copyright details for specific submodules are included in their
respective component folders / files if different from this license.
***************/

#include "ctagSoundProcessorSimpleVCA.hpp"
#include <iostream>

using namespace CTAG::SP;

ctagSoundProcessorSimpleVCA::ctagSoundProcessorSimpleVCA() {
    setIsStereo();
    model = std::make_unique<ctagSPDataModel>(id, isStereo);
    model->LoadPreset(0);
}

void ctagSoundProcessorSimpleVCA::Process(const ProcessData &data) {
    float fLoudness = loudness / 4095.f;
    if(cv_loudness != -1){
        fLoudness = data.cv[cv_loudness]; // range 0 ..1 or -1 .. 1
    }

    for(int i=0;i < this->bufSz; i++){
        data.buf[i*2 + this->processCh] = fLoudness * data.buf[i*2 + this->processCh];
    }
}

ctagSoundProcessorSimpleVCA::~ctagSoundProcessorSimpleVCA() {
}

const char *ctagSoundProcessorSimpleVCA::GetCStrID() const {
    return id.c_str();
}


void ctagSoundProcessorSimpleVCA::setParamValueInternal(const string& id, const string& key, const int val) {
// autogenerated code here
// sectionCpp0
if(id.compare("loudness") == 0){
	if(key.compare("current") == 0){
		loudness = val;
		return;
	}
	if(key.compare("cv") == 0){
		if(val >= -1 && val <= 3)
			cv_loudness = val;
		return;
	}
}
// sectionCpp0

}

void ctagSoundProcessorSimpleVCA::loadPresetInternal() {
// autogenerated code here
// sectionCpp1
loudness = model->GetParamValue("loudness", "current");
cv_loudness = model->GetParamValue("loudness", "cv");
// sectionCpp1

}
