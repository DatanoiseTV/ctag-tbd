#include "ctagSoundProcessorSimpleVCA.hpp"
#include <iostream>

using namespace CTAG::SP;

ctagSoundProcessorSimpleVCA::ctagSoundProcessorSimpleVCA() {
    setIsStereo();
    model = std::make_unique<ctagSPDataModel>(id, isStereo);
    model->LoadPreset(0);
}

void ctagSoundProcessorSimpleVCA::Process(const ProcessData &data) {
    float fLoudness = loudness / 4095.f;
    if(cv_loudness != -1){
        fLoudness = data.cv[cv_loudness]; // range 0 ..1 or -1 .. 1
    }
    for(int i=0;i < this->bufSz; i++){
        data.buf[i*2 + this->processCh] = fLoudness * data.buf[i*2 + this->processCh];
    }
}

ctagSoundProcessorSimpleVCA::~ctagSoundProcessorSimpleVCA() {
}

const char *ctagSoundProcessorSimpleVCA::GetCStrID() const {
    return id.c_str();
}


void ctagSoundProcessorSimpleVCA::setParamValueInternal(const string& id, const string& key, const int val) {
// autogenerated code here
// sectionCpp0
if(id.compare("loudness") == 0){
	if(key.compare("current") == 0){
		loudness = val;
		return;
	}
	if(key.compare("cv") == 0){
		if(val >= -1 && val <= 3)
			cv_loudness = val;
		return;
	}
}
// sectionCpp0

}

void ctagSoundProcessorSimpleVCA::loadPresetInternal() {
// autogenerated code here
// sectionCpp1
loudness = model->GetParamValue("loudness", "current");
cv_loudness = model->GetParamValue("loudness", "cv");
// sectionCpp1

}
